#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Nginx example settings for this HAProxy setting to work
#
# http {
#     ...
#     set_real_ip_from 172.31.0.0/16;
#     real_ip_header proxy_protocol;
#     ...
# }
#
# server {
#     listen       443 default ssl http2 proxy_protocol;
#     listen       [::]:443 default ssl http2 proxy_protocol;
#     ...
# }
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# This package is installed via CentOS Software Collection (SCL)
#
# https://lists.centos.org/pipermail/centos-announce/2018-June/022915.html
#
# QuickStart
# ----------
# You can get started in three easy steps:
#
#     # 1. Install a package with repository for your system:
#     # On CentOS, install package centos-release-scl available in CentOS
# repository:
#     $ sudo yum install centos-release-scl
#
#     # On RHEL, enable RHSCL repository for you system:
#     $ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms
#
#     # 2. Install the collection:
#     $ sudo yum install rh-haproxy18
#
#     # 3. Start using software collections:
#     $ scl enable rh-haproxy18 bash
#
# At this point you should be able to use varnish just as a normal
# application. Some usage examples follow:
#
#     $ systemctl start rh-haproxy18-haproxy
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/opt/rh/rh-haproxy18/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/opt/rh/rh-haproxy18/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/opt/rh/rh-haproxy18/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/opt/rh/rh-haproxy18/lib/haproxy
    pidfile     /var/run/rh-haproxy18-haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/opt/rh/rh-haproxy18/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    tcp
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend ft_http
    bind *:80
    # acl url_static       path_beg       -i /static /images /javascript /stylesheets
    # acl url_static       path_end       -i .jpg .gif .png .css .js

    # use_backend static          if url_static
    default_backend             bk_http

frontend ft_https
    bind *:443
    default_backend bk_https

backend bk_http
    # balance     roundrobin
    server app1 172.31.153.224:80 send-proxy
    # server  app2 127.0.0.1:5002 check
    # server  app3 127.0.0.1:5003 check
    # server  app4 127.0.0.1:5004 check

backend bk_https
    server app1 172.31.153.224:443 send-proxy
